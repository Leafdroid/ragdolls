
@BaseClass = BaseProperties_local_ragdolls
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// Ragdolls.LeverEntity
//
@PointClass base(BaseProperties_local_ragdolls) editormodel( "models/ragdolls/lever.vmdl", fixedbounds ) 
metadata
{
	entity_tool_name = "Lever"
	entity_tool_group = "Ragdolls"
	entity_tool_tip = "Pullable physics lever"
}
= ent_lever : ""
[
	friction(float) : "Friction" : "25" : "How hard it is to move."
	dampening(float) : "Dampening" : "1" : "How dampened the return force is."
	force(float) : "Force" : "0.75" : "How much force is used to return the lever to its initial state."
	doublesided(boolean) : "Double Sided" : 0 : "Can be pulled in both directions? Enables use of OnPulledUp and WhilePulledUp."
	pullmultiplier(float) : "Pull Amount Multiplier" : "0" : "What to multiply the pull fraction output by."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnPulledUp(void) : "Fired when the lever gets pulled up. (Double Sided has to be enabled to use this)"
	output WhilePulledUp(void) : "Fires while the lever is pulled up. (Double Sided has to be enabled to use this)"
	output OnPulledDown(void) : "Fired when the lever gets pulled down."
	output WhilePulledDown(void) : "Fires while the lever is pulled down."
	output OnNeutral(void) : "Fired when the lever gets returned to its neutral state."
	output WhileNeutral(void) : "Fires while the lever is neutral."
	output PullAmount(void) : "How pulled is it? Ranges from -1 to 1 if double sided and 0 to 1 by default."
]

//
// Ragdolls.TriggerReset
//
@SolidClass base(BaseProperties_local_ragdolls) tags( Trigger ) 
metadata
{
	auto_apply_material = "materials/tools/toolstrigger.vmat"
}
= trigger_reset : "Resets entities"
[
	startdisabled(boolean) : "Start Disabled" : 0 : "Should this entity start disabled?"
	actvationtags(tags) : "Actvation Tags" :  : "Entities with these tags can activate this trigger."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
	spawnflags(flags) = [
		1 : "Clients" : 1
		2 : "Npcs" : 0
		4 : "Pushables" : 0
		8 : "Physics Objects" : 0
		16 : "Allied Npcs" : 0
		32 : "Client In Vehicle" : 0
		64 : "Everything" : 0
		512 : "Client Not In Vehicle" : 0
		1024 : "Physics Debris" : 0
	]

	input Enable(void) : "Enables this trigger"
	input Disable(void) : "Disables this trigger"
	input Toggle(void) : "Toggles this trigger between enabled and disabled states"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to fire."
	output OnEndTouch(void) : "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fire."
	output OnStartTouchAll(void) : "Fired when an entity starts touching this trigger while no other passing entities are touching it."
	output OnEndTouchAll(void) : "Fired when all entities touching this trigger have stopped touching it."
]

